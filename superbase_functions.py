import psycopg2
from dotenv import load_dotenv
import os
import json
from decimal import Decimal
load_dotenv()

# Fetch variables
USER = os.getenv("user")
PASSWORD = os.getenv("password")
HOST = os.getenv("host")
PORT = os.getenv("port")
DBNAME = os.getenv("dbname")
""""
# Connect to the database
try:
    connection = psycopg2.connect(
        user=USER,
        password=PASSWORD,
        host=HOST,
        port=PORT,
        dbname=DBNAME
    )
    print("Connection successful!")

    # Create a cursor to execute SQL queries
    cursor = connection.cursor()

    # Example query
    cursor.execute("INSERT INTO fruits (name) VALUES (%s);",("Banana",))
    cursor.execute("SELECT * FROM fruits")
    print(cursor.fetchall())
    # cursor.execute("create table movies (id bigint generated by default as identity primary key);")
    # client.from_("movies").insert([
    #     {
    #         "name": "The Empire Strikes Back",
    #         "description": "After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda."
    #     },
    #     {
    #         "name": "Return of the Jedi",
    #         "description": "After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star."
    #     }
    # ]).execute()
    # result = cursor.fetchall()

    #print("Current Time:", result)

    # Close the cursor and connection
    cursor.close()
    connection.commit()
    connection.close()
    print("Connection closed.")
except Exception as e:
    print(f"Failed to connect: {e}")
    """

def get_values(table_name: str, *column_names: str, condition=None):
    query = f"SELECT {",".join(column_names)} FROM {table_name}{condition if condition else ""}"
    try:
        connection = psycopg2.connect(
            user=USER,
            password=PASSWORD,
            host=HOST,
            port=PORT,
            dbname=DBNAME
        )
        print("Connection successful!")
        cursor = connection.cursor()
        # cursor.execute("INSERT INTO fruits (name) VALUES (%s);", ("Banana",))
        # cursor.execute("SELECT * FROM fruits")
        cursor.execute(query)
        print(cursor.fetchall())
        result = cursor.fetchall()

        cursor.close()
        connection.commit()
        connection.close()
        print("Connection closed.")
        result_json = {i:}
        return result
    except Exception as e:
        print(f"Failed to connect: {e}")
        result = [dict(zip(column_names, [float(val) if isinstance(val, Decimal) else val for val in row])) for row in rows]


print(get_values("Test", "name", "age"))